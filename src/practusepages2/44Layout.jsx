// ------------------------------------------------------------------------
// Layout-結構創建和樣式初始化
// 1.靜態結構搭建

// 初始化樣式的三方庫
// Normalize.css
// npm install normalize.css

// ------------------------------------------------------------------------


// Layout - 二級路由配置

//                      一級路由
//                          |
//          |﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉﹉|
//        Layout                              Login
//           |
//        二級路由
//           |
//   |﹉﹉﹉﹉|﹉﹉﹉﹉|
//  Home   Article  publish

// 準備三個二級路由組件   ==>  router中通過children配置項進行配置  ==>  Layout組件中配置二級路由出口


// ------------------------------------------------------------------------

// Layout- 菜單點擊跳轉路由實現

// 實現效果: 點擊左側菜單可以跳轉到對應的目標路由

// 思路分析
// 1.左側菜單要和路由形成一一對應的關係(知道點了誰)
// 2.點擊時拿到路由路徑調用路由方法跳轉(跳轉到對應的路由下面)

// 菜單參數item中key屬性換成路由的路由地址  => 點擊菜單時通過key獲取路由地址跳轉

// ------------------------------------------------------------------------

// Layout-根據當前路由路徑高亮菜單

// 思路分析
// 1.獲取當前url上的路由路徑useLocation
// 2.找到菜單組件負責高亮的屬性,綁定當前的路由路徑

// ------------------------------------------------------------------------

// Layout 展示個人信息

// 關鍵問題: 用戶信息應該放到哪裡維護?
// 和Token令牌類似,  用戶的信息通常很有可能在多個組件中都需要共享使用,所以同樣應該放到Redux中維護

// Redux進行信息管理 => Layout組件中提交action => Layout組件中完成渲染

// ------------------------------------------------------------------------

// Layout-退出登錄實現

// 退出登錄是一個通用的業務邏輯, 退出登錄都要做什麼?
// 1.提示用戶是否確認要退出(危險操作, 二次確認)
// 2.用戶確認之後清除用戶信息(Token以及其它個人信息)
// 3.跳轉到登錄頁(未下次登錄做準備)

// ------------------------------------------------------------------------

// Layout-處理Token失效

// 什麼是Token失效?
// 為了用戶的安全和隱私考慮, 在用戶長時間未在網站中做任何操作且規定的失效時間到達之後, 當前的Tokan就會失效, 一旦失效, 不能再做為用戶令牌標示請求隱私數據

// 前端如何知道Token已經失效?
// 通常在Token失效之後再去請求接口,後端會返回401狀態碼, 
// 前端可以監控這個狀態做後續的操作

// Token失效了之後前端應該做什麼?

// 在axios攔截中監控401狀態碼  =>  清除失效的Token,跳轉登錄
