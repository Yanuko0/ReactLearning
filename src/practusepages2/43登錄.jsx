// <!-- 再建置CRA項目裡面做 -->
// <!-- https://ant.design/components/card-cn -->
// ------------------------------------------------------------------------
// <!-- 基本結構搭建 -->
// <!-- 實現步驟 -->
// <!-- 1.在Login/index.js中創建登錄頁面基本結構 -->
// <!-- 2.在Login目錄中創建index.scss文件,指定組件樣式 -->
// <!-- 3.將logo.png 和 login.png拷貝到assets目錄中 -->

// <!-- 使用現成的Ant組件創建登入頁的內容結構 -->

// <!-- 主要組件 Card、Form、Input、Button -->
// ------------------------------------------------------------------------
// <!-- 登錄-表單校驗實現 -->
// <!-- 表單校驗,可以在用戶提交登入之前,校驗用戶的輸入是否符合預期, -->
// <!-- 如果不符合就阻止提交,顯示錯誤信息 -->

// <!-- 參考官方實現基礎Demo -->

// <!-- FormItem 綁定 name -->
// <!-- FormItem 綁定 rules -->

// <!-- 
// <Form.Item
// name="username"  //指定校驗字段名  //要跟後端街口保持一致
// rules={[           //指定當前校驗規則對象
// {                   
// required: true,
// message: 'Please input your username!',
// },
// ]}>
// <Input size="large" placeholder="請輸入手機號碼"/>
// </Form.Item> 
// -->

// <!-- 按照業務定制化修改 -->

// <!-- 增加失焦時校驗 -->
// <!-- <Form validateTrigger="onBlur"> validateTrigger 來自官方文檔  -->
// <!-- 手機號為有效格式 -->

// ------------------------------------------------------------------------
// <!-- 登錄- 獲取表單數據 -->
// <!-- 當用戶輸入正確的表單內容,點擊確認時需要收集到用戶當前輸入的內容,用來提交接口請求 -->

// <!-- 解決方案:給Form組件綁定onFinish回調函數,通過回調函數的參數獲取用戶輸入的內容 -->
// <!-- const onFinish = (values) => {
//         console.log(values)
//     } -->
// <!-- 拿到用戶輸入數據 -->
// ------------------------------------------------------------------------
// <!-- 登錄-封裝request請求模塊 -->
// <!-- 再整個項目中會發送很多網路請求,使用axios三方庫做好統一封裝,方便統一管理和復用 -->

// <!-- 1.幾乎所有的接口都是一樣的接口域名 -->
// <!-- 2.幾乎所有的街口都需要設置一樣的超時時間 -->
// <!-- 3.幾乎所有接口都需要做Token權限處理 -->
// <!-- 
// axios統一封裝  =>  axios實例   ---{  接口1
//                                  {  接口2
//                                  {  接口n 
// -->

// ------------------------------------------------------------------------

// <!-- 登錄-使用Redux管理token -->

// <!-- 
// Token作為一個用戶的標示數據,需要在很多模塊中共享, 
// Redux可以方便的解決狀態共享問題 -->

// <!--                    提交action         
//     Redux(Token管理)      <=====         Login組件
//  -->

//  <!-- 1.Redux中編寫獲取Token的異步獲取和同步修改 -->
//  <!-- 2.Login組件負責提交action並且把表單數據傳遞過來 -->

//  <!-- 1.安裝 -->
//  <!-- npm i react-redux @reduxjs/toolkit -->

// ------------------------------------------------------------------------

//  <!-- 登錄-Token持久化 -->
//  <!-- 現存問題 -->
//  <!-- Redux存入Token之後如果刷新瀏覽器,Tokn會丟失(持久化就是防止刷新時丟失Token) -->

//  <!-- 問題原因 -->
//  <!-- Redux是基於瀏覽器內存的存儲方式,刷新時狀態回復為初始狀態 -->
//  <!-- initialState:{token:''} -->

//  <!-- 技術方案 -->

//  <!-- 獲取並存Token  Redux  +  LocalStorage -->

//  <!-- 初始化Token    LocalStorage ?  LocalStorage : 空字符串 -->

//  ------------------------------------------------------------------------

//  <!-- 登錄-封裝Token的存取刪方法 -->

//  <!-- 封裝的原因? -->
//  <!-- 對於Token的各類操作在多個項目多個模塊中都有用到,
//  為了可以共享復用可以封裝成工具函數 -->


// <!--
//              setToken(存)                                 
//              getToken(取)           =>      其他模塊
//             removeToken(刪)
//            (utils/token.js)
// -->

// ------------------------------------------------------------------------

// <!-- Axios請求攔截器注入Token -->
// <!-- utils > request -->
// <!-- 為什麼要做這件事 -->
// <!-- Token作為用戶的一個標示數據,後端很多接口都會以它作為接口權限判斷的依據;請求攔截器注入Token之後,所有用到Axios實例的街口請求都會自動攜帶了Token -->


// <!--
//                                                ==>獲取用戶信息接口
//     utils/request.js   ==>       axios         ==>文章發布接口
//                               token統一注入     ==>獲取頻道接口
// -->

// <!-- 
//     axios請求攔截器請求頭中注入Token     ==>    調用街口測試Token是否成功攜帶 
// -->

// ------------------------------------------------------------------------

// <!-- 使用Token做路由權限控制 -->

// <!-- 具體要做什麼事?
// 有些路由頁面的內容信息比較敏感,如果用戶沒有經過登錄獲取到有校地Token,是沒有權限跳轉的,根據Token的有無控制當前路由是否可以跳轉,
// 就是路由的權限控制 -->

// <!-- 技術方案 -->

// <!--        ………………………………………………………………………………………………………
//             |              =>是(正常返回路由組件) ==|==>路由組件
// 路由組件 ==> |  是否有Token                         |
//             |              =>否(強制跳轉回到登錄) ==|==>跳回登錄
//             ﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊﹊
//                     HOC Component(高階組件)
//              高階組件:以一個組件做為參數,返回的依舊是組件
// -->

// <!-- 封裝高階組件  ==> 測試有無Token條件下的高階組件 -->

// ------------------------------------------------------------------------

